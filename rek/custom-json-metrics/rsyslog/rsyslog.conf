module(load="imuxsock" SysSock.Use="on")
module(load="omriemann")
module(load="mmnormalize")
module(load="omstdout")
module(load="mmjsonparse")

input (type="imuxsock" Socket="/run/rsyslog/log.sock")

lookup_table(name="log4j_level_to_severity" file="/etc/error-level.lookup")

action(name="normalize" type="mmnormalize" ruleBase="/etc/rsyslog-http.rb")

ruleset(name="metrics") {
    action(name="send-to-riemann" type="omriemann" subtree="!body!@fields!_riemann_metric" server="riemann" mode="single")
}

if ($parsesuccess == "OK") then {

   # If we have a log4j style log, convert it to our json structure
   if ($!event.tags contains "log4j") then {
        set $!body!@fields!levelname = $!levelname;
        set $!body!@message = $!message;
   }

   # If this is an http log, use the status code
   if ($!event.tags contains "http" and $!status >= 400) then {
       set $!severity = 3;
       set $!body!@fields!levelname = "error";

   # If we have a json log with a level name, map it back to a severity    
   } else if ($!body!@fields!levelname != "") then {
       set $!severity = cnum(lookup("log4j_level_to_severity", $!body!@fields!levelname));

   # Otherwise, just copy the severity over so we have a consistent structure
   } else {
       set $!severity = $syslogseverity;
       set $!body!@fields!levelname = $syslogseverity-text;
   }

   # If we have an error that is not an HTTP log, send it to riemann
   if ($!severity <= 3 and not($!event.tags contains "http")) then {
        action( type="omriemann"
                server="riemann"
                prefix="errors"
                description="!body!@message")
   }

   # If we have a riemann metric field, send it to riemann
   if($!body!@fields!_riemann_metric != "") then {
        call metrics;
   }
}
